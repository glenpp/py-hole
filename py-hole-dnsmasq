#!/usr/bin/env python3
"""
Manages dnsmasq addn-hosts file (DNS Firewall) against configured blacklists
Copyright (C) 2017  Glen Pitt-Pladdy

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.


See: https://www.pitt-pladdy.com/blog/_20170407-105402_0100_DNS_Firewall_blackhole_malicious_like_Pi-hole_with_bind9/
"""


# removal: delete files specified in cachedir/cacheprefix, dnsmasqblackholeconfig, output

import yaml
import time
import re
import os
import requests
import sys
import subprocess
import argparse






# read command line arguments with argparse
parser = argparse.ArgumentParser(description='A Pi-hole inspired DNS firewall for use on laptops running NetworkManager with dnsmasq')
parser.add_argument('-c', '--config', type=str, help='Configuration file to use', default='/etc/py-hole-dnsmasq_config.yaml')
args = parser.parse_args()

# read config
configfile = args.config
config = {
    # base config overridden by configfile
    'cachedir': '/var/local/py-hole',
    'cacheprefix': 'cache-',
    'cacheexpire': 14400,    # 4 hours
    'hostsfile': '/etc/local-hosts-blackhole',
    'dnsmasqblackholeconfig': '/etc/dnsmasq.d/local-hosts-blackhole',
    'defaultresponse': '0.0.0.0',
    'exclusions': {
        'localhost': True,    # we need this always else we get it blocked for 127.0.0.1 keys
        'www.googleadservices.com': True,    # needed for google shopping
        'pagead.l.doubleclick.net': True,    # CNAME for www.googleadservices.com needed for google shopping
    },
    'blacklists': {    # see https://github.com/pi-hole/pi-hole/blob/master/adlists.default
        'StevenBlack': { 'url':'https://raw.githubusercontent.com/StevenBlack/hosts/master/hosts', 'format':'hosts', 'hostskey':'0.0.0.0' },
        'malwaredomains': { 'url':'https://mirror1.malwaredomains.com/files/justdomains', 'format':'raw' },
        'cameleon': { 'url':'http://sysctl.org/cameleon/hosts', 'format':'hosts', 'hostskey':'127.0.0.1' },
        'abuse.ch': { 'url':'https://zeustracker.abuse.ch/blocklist.php?download=domainblocklist', 'format':'raw' },
        'disconnect.me_tracking': { 'url':'https://s3.amazonaws.com/lists.disconnect.me/simple_tracking.txt', 'format':'raw' },
        'disconnect.me_ad': { 'url':'https://s3.amazonaws.com/lists.disconnect.me/simple_ad.txt', 'format':'raw' },
#        'hosts-file.net': { 'url':'https://hosts-file.net/ad_servers.txt', 'format':'hosts0000' },
#        'Windows 10 telemetry': {
#        'securemecca.com': { 'url':'http://securemecca.com/Downloads/hosts.txt', 'format':'hosts', 'hostskey':'127.0.0.1' },
    }
}
# load yaml file or error
if os.path.isfile(configfile):
    with open(configfile, 'r') as f:
        config.update(yaml.load(f))
    # always exclude localhost else we get it blocked for 127.0.0.1 keys
    config['exclusions']['localhost'] = True
else:
    sys.exit("Configuration file {} not found\n".format(configfile))


# our hostsfile
outputdata = "# created %d\n" % int(time.time())
seenbefore = {}
commentstart = '#'    # for hosts / dnsmasq
def addcomment(comment):
    global outputdata
    outputdata += "{}{}\n".format(commentstart, comment)
def addhost(host):
    global outputdata
    host = host.lower().strip()
    if host in seenbefore:
        outputdata += "%s seenbefore in %s %s" % (commentstart,seenbefore[host],commentstart)
    if host in config['exclusions']:
        outputdata += "{} excluded {}".format(commentstart, commentstart)
    outputdata += "{} {}\n".format(config['defaultresponse'], host)
    seenbefore[host] = source


# grab from web or cache
cacheupto = time.time() - config['cacheexpire']
if not os.path.isdir(config['cachedir']):
    os.makedirs(config['cachedir'])
httpheaders = { 'User-Agent': 'py-hole hosts blackhole manager' }
for source in config['blacklists']:
    cachefile = os.path.join ( config['cachedir'], config['cacheprefix'] + source )
    # check cache, download if needed
    if os.path.isfile ( cachefile ) and os.path.getmtime ( cachefile ) >= cacheupto:
        print("fresh cache {}".format(config['blacklists'][source]['url']))
        with open ( cachefile, 'rt' ) as f:
            data = f.read ()
    else:
        print("retrieve {}".format(config['blacklists'][source]['url']))
        response = requests.get(config['blacklists'][source]['url'], headers=httpheaders)
        if response.status_code != 200:
            sys.exit("ERROR - got http response {:d} for {}".format(response.status_code, config['blacklists'][source]['url']))
        # write cache file
        with open(cachefile+'.TMP', 'wt') as f:
            f.write(response.text)
        os.rename(cachefile+'.TMP', cachefile)
        # all done
        data = response.text
    # we are good to go
    outputdata += "\n{}=============================================================================\n".format(commentstart)
    outputdata += "{} Source: {} :: {}\n".format(commentstart, source, config['blacklists'][source]['url'])
    outputdata += "{}=============================================================================\n\n".format(commentstart)
    # process data
    recordcount = 0
    if config['blacklists'][source]['format'] == 'hosts':
        # comments start "#", we only take lines matching "hostskey"
        for line in data.splitlines():
            # separate comments that could be whole line or after a record
            m = re.match(r'([^#]*?)\s+#(.*)$', line)
            if m:
                line = m.group(1)
                addcomment(m.group(2).lstrip())
            if line == '':
                continue
            # process the host line
            hostlist = re.split ( r'\s+', line )
            if hostlist[0] != config['blacklists'][source]['hostskey']:
                # not a matching key
                continue
            for host in hostlist[1:]:
                recordcount += 1
                addhost ( host )
    elif config['blacklists'][source]['format'] == 'raw':
        # comments start "#"
        for line in data.splitlines():
            if line == '':
                continue
            if line[0] == '#':
                addcomment(line[1:])
                continue
            host = line.strip()
            recordcount += 1
            addhost(host)
    else:
        sys.exit("Unknown format {} for {}".format(config['blacklists'][source]['format'], source))
    if recordcount == 0:
        sys.exit("Got recordcount of {:d} for {}".format(recordcount, source))

# if we have a local blacklist, add that also
if 'localblacklist' in config:
    outputdata += "\n{}=============================================================================\n".format(commentstart)
    outputdata += "{} Source: Local blacklist from {}\n".format(commentstart, configfile)
    outputdata += "{}=============================================================================\n\n".format(commentstart)
    for host in config['localblacklist']:
        addhost(host)


# write the config['hostsfile'] file
with open(config['hostsfile']+'.TMP', 'wt') as f:
    f.write(outputdata)
if os.path.isfile(config['hostsfile']):
    os.rename(config['hostsfile'], config['hostsfile']+'.old')
os.rename(config['hostsfile']+'.TMP', config['hostsfile'])


# ensure we have a dnsmasq config file - we assume if it's there it's sufficient TODO maybe we should check
if not os.path.isfile(config['dnsmasqblackholeconfig']):
    with open(config['dnsmasqblackholeconfig']+'.TMP', 'wt') as f:
        f.write("addn-hosts={}\n".format(config['hostsfile']))
    os.rename(config['dnsmasqblackholeconfig']+'.TMP', config['dnsmasqblackholeconfig'])
# TODO reload dnsmasq (SIGHUP re-reads files, but not config)

