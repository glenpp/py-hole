#!/usr/bin/env python3
"""
Manages bind9 RPZ file (DNS Firewall) against configured blacklists
Copyright (C) 2017  Glen Pitt-Pladdy

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.


See: https://www.pitt-pladdy.com/blog/_20170407-105402_0100_DNS_Firewall_blackhole_malicious_like_Pi-hole_with_bind9/
"""


import time
import re
import os
import sys
import subprocess
import argparse
import requests
import yaml




# read command line arguments with argparse
parser = argparse.ArgumentParser(
    description='A Pi-hole inspired DNS firewall for use with bind/named using RPZ'
)
parser.add_argument(
    '-c', '--config', type=str,
    help='Configuration file to use (default: /etc/bind/py-hole-bind9RPZ_config.yaml)',
    default='/etc/bind/py-hole-bind9RPZ_config.yaml'
)
args = parser.parse_args()

# read config
CONFIGFILE = args.config
config = {
    # base config overridden by CONFIGFILE
    'cachedir': '/var/local/bindRPZ',
    'cacheprefix': 'bindRPZcache-',
    'cacheexpire': 14400,    # 4 hours
    'defaultresponse': 'CNAME .',
    'exclusions': {},
    'blacklists': {
        'StevenBlack': {
            'url': 'https://raw.githubusercontent.com/StevenBlack/hosts/master/hosts',
            'format': 'hosts',
            'hostskey': '0.0.0.0',
        },
    },
}
# load yaml file or error
if os.path.isfile(CONFIGFILE):
    with open(CONFIGFILE, 'rt') as f:
        config.update(yaml.load(f))
    # always exclude localhost else we get it blocked for 127.0.0.1 keys
    config['exclusions']['localhost'] = True
else:
    sys.exit("Configuration file {} not found\n".format(CONFIGFILE))
# at minimum we need to end up with an rpzfile
if 'rpzfile' not in config:
    sys.exit("Setting for 'rpzfile' not found in configuration {}\n".format(CONFIGFILE))
# and a template with a serial number
if 'rpztemplate' not in config or not re.search(r'<SERIAL>', config['rpztemplate']):
    sys.exit("Setting for 'rpztemplate' including a serial number marker '<SERIAL>' not found in configuration {}\n".format(CONFIGFILE))
# and a reloadzonecommand:
if 'reloadzonecommand' not in config:
    sys.exit("Setting for 'reloadzonecommand' not found in configuration {}\n".format(CONFIGFILE))


# build our zone
class ZoneFile(object):
    """Render a bind RPZ zone file from a template
    """
    def __init__(self, config):
        """Constructor

        :arg config: dict, configuration data
        """
        self.config = config
        self.outputdata = re.sub(
            r'<SERIAL>',
            '{:010d}'.format(int(time.time())),
            self.config['rpztemplate']
        )
        self.seenbefore = {}
    def add_comment(self, comment):
        """Add a comment line
        """
        self.outputdata += ";{}\n".format(comment)
    def add_blank(self):
        """Add a blank line
        """
        self.outputdata += "\n"
    def add_host(self, host, source):
        """Add a blacklisted host to bind zone file

        :arg host: str, host pattern to blacklist
        :arg source: str, identifier for the source of this host pattern
        """
        host = host.lower().strip()
        # exclude hosts we've already seen
        if host in self.seenbefore:
            self.outputdata += "; seenbefore in {} {}\n".format(self.seenbefore[host], host)
            return
        # exclude hosts we've explicitly set as excluded
        if host in self.config['exclusions']:
            self.outputdata += "; excluded {}\n".format(host)
            return
        # try add the line
        outputline = "{} {}\n".format(host, config['defaultresponse'])
        if len(outputline) >= 255:  # seems to be a limit from https://www.ietf.org/rfc/rfc1035.txt
            self.outputdata += ';too-long '
        self.outputdata += outputline
        self.seenbefore[host] = source
    def write(self):
        """Write out the bind RPZ sone file
        """
        with open(self.config['rpzfile'] + '.TMP', 'wt') as f_rpz:
            f_rpz.write(self.outputdata)
        os.rename(self.config['rpzfile'], self.config['rpzfile'] + '.old')
        os.rename(self.config['rpzfile'] + '.TMP', self.config['rpzfile'])


# grab from web or cache
CACHE_FROM = time.time() - config['cacheexpire']
zone = ZoneFile(config)
if not os.path.isdir(config['cachedir']):
    os.makedirs(config['cachedir'])
HTTP_HEADERS = {'User-Agent': 'py-hole RPZ blackhole manager'}
for source in config['blacklists']:
    cachefile = os.path.join(config['cachedir'], config['cacheprefix'] + source)
    # check cache, download if needed
    if os.path.isfile(cachefile) and os.path.getmtime(cachefile) >= CACHE_FROM:
        print("fresh cache {}".format(config['blacklists'][source]['url']))
        with open(cachefile, 'rt') as f:
            data = f.read()
    else:
        print("retrieve {}".format(config['blacklists'][source]['url']))
        response = requests.get(config['blacklists'][source]['url'], headers=HTTP_HEADERS)
        if response.status_code != 200:
            sys.exit("ERROR - got http response {:d} for {}".format(response.status_code, config['blacklists'][source]['url']))
        # write cache file
        with open(cachefile+'.TMP', 'wt') as f:
            f.write(response.text)
        os.rename(cachefile + '.TMP', cachefile)
        # all done
        data = response.text
    # we are good to go
    zone.add_blank()
    zone.add_comment("=============================================================================")
    zone.add_comment(" Source: {} :: {}".format(source, config['blacklists'][source]['url']))
    zone.add_comment("=============================================================================")
    zone.add_blank()
    # process data
    recordcount = 0
    if config['blacklists'][source]['format'] == 'hosts':
        # comments start "#", we only take lines matching "hostskey"
        for line in data.splitlines():
            # separate comments that could be whole line or after a record
            m = re.match(r'([^#]*?)\s+#(.*)$', line)
            if m:
                line = m.group(1)
                zone.add_comment(m.group(2).lstrip())
            if line == '':
                continue
            # process the host line
            hostlist = re.split(r'\s+', line)
            if hostlist[0] != config['blacklists'][source]['hostskey']:
                # not a matching key
                continue
            for host in hostlist[1:]:
                recordcount += 1
                zone.add_host(host, source)
    elif config['blacklists'][source]['format'] == 'raw':
        # comments start "#"
        for line in data.splitlines():
            if line == '':
                continue
            if line[0] == '#':
                zone.add_comment(line[1:])
                continue
            host = line.strip()
            recordcount += 1
            zone.add_host(host, source)
    else:
        sys.exit("Unknown format {} for {}".format(config['blacklists'][source]['format'], source))
    if recordcount == 0:
        sys.exit("Got recordcount of {:d} for {}".format(recordcount, source))

# if we have a local blacklist, add that also
if 'localblacklist' in config:
    zone.add_blank()
    zone.add_comment("=============================================================================")
    zone.add_comment(" Source: Local blacklist from {}".format(CONFIGFILE))
    zone.add_comment("=============================================================================")
    zone.add_blank()
    for host in config['localblacklist']:
        zone.add_host(host, CONFIGFILE)


# write the config['rpzfile'] file
zone.write()
# reload bind zone file
subprocess.Popen(config['reloadzonecommand'], stdin=None, stdout=None)
